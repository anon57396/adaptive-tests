name: Multi-Language CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 0'  # Weekly security scan

permissions:
  contents: read
  security-events: write

jobs:
  # JavaScript/TypeScript Testing
  js-tests:
    name: JavaScript/TypeScript Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v5
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: |
          npm run lint:markdown || true
          npm run lint:links || true

      - name: Run JavaScript tests
        run: |
          npm run test:coverage
          npm run validate

      - name: Run TypeScript tests
        run: npm run test:typescript

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info
          flags: javascript
          name: js-coverage

  # Python Testing
  python-tests:
    name: Python Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          cd examples/python
          pip install -r requirements.txt 2>/dev/null || pip install pytest
          pip install pytest-cov pytest-asyncio

      - name: Run Python tests
        run: |
          cd examples/python
          python -m pytest tests/ -v --cov=src --cov-report=xml

      - name: Run Python validation
        run: python3 scripts/demo/validate-python.py || true

      - name: Upload Python coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./examples/python/coverage.xml
          flags: python
          name: python-coverage

  # Java Testing
  java-tests:
    name: Java Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java-version: [11, 17, 21]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Java ${{ matrix.java-version }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java-version }}
          distribution: 'temurin'
          cache: 'maven'

      - name: Run Java tests with Maven
        run: |
          cd examples/java
          if [ -f pom.xml ]; then
            mvn test -B
            mvn verify -B
          fi

      - name: Run Java tests with Gradle
        run: |
          cd examples/java
          if [ -f build.gradle ]; then
            ./gradlew test
            ./gradlew check
          fi

      - name: Run Java validation
        run: bash scripts/demo/validate-java.sh || true

  # PHP Testing
  php-tests:
    name: PHP Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php-version: ['8.0', '8.1', '8.2', '8.3']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup PHP ${{ matrix.php-version }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          tools: composer, phpunit
          coverage: xdebug

      - name: Install PHP dependencies
        run: |
          cd examples/php
          if [ -f composer.json ]; then
            composer install --no-progress --no-interaction
          fi

      - name: Run PHP tests
        run: |
          cd examples/php
          if [ -f phpunit.xml ]; then
            phpunit --coverage-text
          elif [ -d tests ]; then
            phpunit tests/
          fi

  # Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: |
          echo "üîí Running npm security audit..."
          npm audit --audit-level=moderate || true

      - name: Run npm audit fix (dry-run)
        run: |
          echo "üîß Checking auto-fixable vulnerabilities..."
          npm audit fix --dry-run || true

      - name: Setup Python for safety check
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install safety
        run: pip install safety

      - name: Run Python safety check
        run: |
          echo "üîí Running Python security scan..."
          if [ -f requirements.txt ]; then
            safety check -r requirements.txt --json || true
          fi
          cd examples/python
          if [ -f requirements.txt ]; then
            safety check -r requirements.txt --json || true
          fi

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Dependency Updates Check
  dependency-check:
    name: Dependency Updates
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '20'

      - name: Check for outdated npm packages
        run: |
          echo "üì¶ Checking for outdated packages..."
          npm outdated || true

      - name: Check for Python updates
        run: |
          pip install pip-review
          echo "üì¶ Checking for outdated Python packages..."
          cd examples/python
          if [ -f requirements.txt ]; then
            pip-review --local || true
          fi

  # Cross-Language Integration Tests
  integration-tests:
    name: Cross-Language Integration
    runs-on: ubuntu-latest
    needs: [js-tests, python-tests, java-tests]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup multi-language environment
        run: |
          # Setup Node.js
          curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
          sudo apt-get install -y nodejs

          # Setup Python
          sudo apt-get install -y python3 python3-pip

          # Setup Java
          sudo apt-get install -y openjdk-17-jdk maven

      - name: Run cross-language validation
        run: |
          echo "üåê Running cross-language integration tests..."

          # JavaScript validation
          npm ci
          npm run validate

          # Python validation
          if [ -f scripts/demo/validate-python.py ]; then
            python3 scripts/demo/validate-python.py || true
          fi

          # Java validation
          if [ -f scripts/demo/validate-java.sh ]; then
            bash scripts/demo/validate-java.sh || true
          fi

  # Performance Benchmarking
  performance-tests:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run performance benchmarks
        run: |
          echo "‚ö° Running performance benchmarks..."
          npm run benchmark || true

      - name: Store benchmark results
        uses: benchmark-action/github-action-benchmark@v1
        with:
          tool: 'customBiggerIsBetter'
          output-file-path: benchmark-results.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: false

  # Summary Status
  ci-complete:
    name: CI Complete
    runs-on: ubuntu-latest
    needs: [js-tests, python-tests, java-tests, php-tests, security-scan, integration-tests]
    if: always()
    steps:
      - name: Summary
        run: |
          echo "üìä Multi-Language CI Summary:"
          echo "JavaScript/TypeScript: ${{ needs.js-tests.result }}"
          echo "Python: ${{ needs.python-tests.result }}"
          echo "Java: ${{ needs.java-tests.result }}"
          echo "PHP: ${{ needs.php-tests.result }}"
          echo "Security Scan: ${{ needs.security-scan.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"

          if [ "${{ needs.js-tests.result }}" != "success" ] ||
             [ "${{ needs.security-scan.result }}" != "success" ]; then
            echo "‚ùå CI Failed - Critical checks did not pass"
            exit 1
          fi

          echo "‚úÖ CI Complete - All critical checks passed!"